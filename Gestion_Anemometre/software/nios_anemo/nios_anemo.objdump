
nios_anemo.elf:     file format elf32-littlenios2
nios_anemo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000c04 memsz 0x00000c04 flags r-x
    LOAD off    0x00001c24 vaddr 0x00010c24 paddr 0x00010d14 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001e04 vaddr 0x00010e04 paddr 0x00010e04 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001d14  2**0
                  CONTENTS
  2 .text         00000bc0  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  00010be0  00010be0  00001be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00010c24  00010d14  00001c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00010e04  00010e04  00001e04  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00010e14  00010e14  00001d14  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002a8  00000000  00000000  00001d38  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003589  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000012fd  00000000  00000000  00005569  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001574  00000000  00000000  00006866  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000390  00000000  00000000  00007ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f1f  00000000  00000000  0000816c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001300  00000000  00000000  0000908b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000a38c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  0000a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b606  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000b609  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b60c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b60d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000005  00000000  00000000  0000b60e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000005  00000000  00000000  0000b613  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000005  00000000  00000000  0000b618  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0000b61d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000000a  00000000  00000000  0000b629  2**0
                  CONTENTS, READONLY
 26 .jdi          000049ca  00000000  00000000  0000b633  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003826b  00000000  00000000  0000fffd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00010be0 l    d  .rodata	00000000 .rodata
00010c24 l    d  .rwdata	00000000 .rwdata
00010e04 l    d  .bss	00000000 .bss
00010e14 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_anemo_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010118 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00010c24 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00010ab4 g     F .text	0000002c alt_main
00010d14 g       *ABS*	00000000 __flash_rwdata_start
000100cc g     F .text	0000004c printf
00010ae0 g     F .text	00000038 alt_putstr
00010bd8 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010e04 g     O .bss	00000004 errno
00010e0c g     O .bss	00000004 alt_argv
00018d04 g       *ABS*	00000000 _gp
00010090 g     F .text	0000003c _printf_r
000108f0 g     F .text	00000064 .hidden __udivsi3
00010d04 g     O .rwdata	00000004 _global_impure_ptr
00010e14 g       *ABS*	00000000 __bss_end
00010bd0 g     F .text	00000004 alt_dcache_flush_all
00010d14 g       *ABS*	00000000 __ram_rwdata_end
00010b18 g     F .text	00000060 write
00010c24 g       *ABS*	00000000 __ram_rodata_end
00010d0c g     O .rwdata	00000004 DEBUG
00010954 g     F .text	00000058 .hidden __umodsi3
00010e14 g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010b9c g     F .text	00000034 altera_avalon_jtag_uart_write
00010184 g     F .text	0000052c ___vfprintf_internal_r
00010020 g     F .text	0000003c _start
00010b98 g     F .text	00000004 alt_sys_init
000109ac g     F .text	00000028 .hidden __mulsi3
00010c24 g       *ABS*	00000000 __ram_rwdata_start
00010be0 g       *ABS*	00000000 __ram_rodata_start
00010e14 g       *ABS*	00000000 __alt_stack_base
000106cc g     F .text	000000b8 __sfvwrite_small_dev
00010e04 g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000034 main
00010000 g       *ABS*	00000000 __alt_mem_RAM
00010e08 g     O .bss	00000004 alt_envp
00010d10 g     O .rwdata	00000004 alt_errno
000107f8 g     F .text	00000084 .hidden __divsi3
00010be0 g       *ABS*	00000000 __flash_rodata_start
00010b78 g     F .text	00000020 alt_irq_init
000107a0 g     F .text	00000058 _write_r
00010d08 g     O .rwdata	00000004 _impure_ptr
00010e10 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010d14 g       *ABS*	00000000 _edata
00010e14 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
0001087c g     F .text	00000074 .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010784 g     F .text	0000001c strlen
00010bd4 g     F .text	00000004 alt_icache_flush_all
000106b0 g     F .text	0000001c __vfprintf_internal
000109d4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a34114 	ori	gp,gp,36100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10838114 	ori	r2,r2,3588

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c38514 	ori	r3,r3,3604

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff6044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00109d40 	call	109d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0010ab40 	call	10ab4 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff6058>

0001005c <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{ 
  alt_putstr("Hello Pravin RUGHOONAUTH, from Nios II!\n");
   1005c:	01000074 	movhi	r4,1
#include "io.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{ 
   10060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello Pravin RUGHOONAUTH, from Nios II!\n");
   10064:	2102f804 	addi	r4,r4,3040
#include "io.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{ 
   10068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello Pravin RUGHOONAUTH, from Nios II!\n");
   1006c:	0010ae00 	call	10ae0 <alt_putstr>
  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0x0);
   10070:	008000b4 	movhi	r2,2
   10074:	10840404 	addi	r2,r2,4112
   10078:	10000035 	stwio	zero,0(r2)

  	  //int vitesse_vent=10;



  	    printf("Vitesse du vent =%d\n ",IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE));
   1007c:	11400037 	ldwio	r5,0(r2)
   10080:	01000074 	movhi	r4,1
   10084:	21030304 	addi	r4,r4,3084
   10088:	00100cc0 	call	100cc <printf>
   1008c:	003fff06 	br	1008c <__alt_data_end+0xffff608c>

00010090 <_printf_r>:
   10090:	defffd04 	addi	sp,sp,-12
   10094:	dfc00015 	stw	ra,0(sp)
   10098:	d9800115 	stw	r6,4(sp)
   1009c:	d9c00215 	stw	r7,8(sp)
   100a0:	20c00217 	ldw	r3,8(r4)
   100a4:	01800074 	movhi	r6,1
   100a8:	3181b304 	addi	r6,r6,1740
   100ac:	19800115 	stw	r6,4(r3)
   100b0:	280d883a 	mov	r6,r5
   100b4:	21400217 	ldw	r5,8(r4)
   100b8:	d9c00104 	addi	r7,sp,4
   100bc:	00101840 	call	10184 <___vfprintf_internal_r>
   100c0:	dfc00017 	ldw	ra,0(sp)
   100c4:	dec00304 	addi	sp,sp,12
   100c8:	f800283a 	ret

000100cc <printf>:
   100cc:	defffc04 	addi	sp,sp,-16
   100d0:	dfc00015 	stw	ra,0(sp)
   100d4:	d9400115 	stw	r5,4(sp)
   100d8:	d9800215 	stw	r6,8(sp)
   100dc:	d9c00315 	stw	r7,12(sp)
   100e0:	00800074 	movhi	r2,1
   100e4:	10834204 	addi	r2,r2,3336
   100e8:	10800017 	ldw	r2,0(r2)
   100ec:	01400074 	movhi	r5,1
   100f0:	2941b304 	addi	r5,r5,1740
   100f4:	10c00217 	ldw	r3,8(r2)
   100f8:	d9800104 	addi	r6,sp,4
   100fc:	19400115 	stw	r5,4(r3)
   10100:	200b883a 	mov	r5,r4
   10104:	11000217 	ldw	r4,8(r2)
   10108:	00106b00 	call	106b0 <__vfprintf_internal>
   1010c:	dfc00017 	ldw	ra,0(sp)
   10110:	dec00404 	addi	sp,sp,16
   10114:	f800283a 	ret

00010118 <print_repeat>:
   10118:	defffb04 	addi	sp,sp,-20
   1011c:	dc800315 	stw	r18,12(sp)
   10120:	dc400215 	stw	r17,8(sp)
   10124:	dc000115 	stw	r16,4(sp)
   10128:	dfc00415 	stw	ra,16(sp)
   1012c:	2025883a 	mov	r18,r4
   10130:	2823883a 	mov	r17,r5
   10134:	d9800005 	stb	r6,0(sp)
   10138:	3821883a 	mov	r16,r7
   1013c:	04000a0e 	bge	zero,r16,10168 <print_repeat+0x50>
   10140:	88800117 	ldw	r2,4(r17)
   10144:	01c00044 	movi	r7,1
   10148:	d80d883a 	mov	r6,sp
   1014c:	880b883a 	mov	r5,r17
   10150:	9009883a 	mov	r4,r18
   10154:	103ee83a 	callr	r2
   10158:	843fffc4 	addi	r16,r16,-1
   1015c:	103ff726 	beq	r2,zero,1013c <__alt_data_end+0xffff613c>
   10160:	00bfffc4 	movi	r2,-1
   10164:	00000106 	br	1016c <print_repeat+0x54>
   10168:	0005883a 	mov	r2,zero
   1016c:	dfc00417 	ldw	ra,16(sp)
   10170:	dc800317 	ldw	r18,12(sp)
   10174:	dc400217 	ldw	r17,8(sp)
   10178:	dc000117 	ldw	r16,4(sp)
   1017c:	dec00504 	addi	sp,sp,20
   10180:	f800283a 	ret

00010184 <___vfprintf_internal_r>:
   10184:	deffe504 	addi	sp,sp,-108
   10188:	d8c00804 	addi	r3,sp,32
   1018c:	ddc01815 	stw	r23,96(sp)
   10190:	dd801715 	stw	r22,92(sp)
   10194:	dd401615 	stw	r21,88(sp)
   10198:	dd001515 	stw	r20,84(sp)
   1019c:	dcc01415 	stw	r19,80(sp)
   101a0:	dc801315 	stw	r18,76(sp)
   101a4:	dc401215 	stw	r17,72(sp)
   101a8:	dc001115 	stw	r16,68(sp)
   101ac:	dfc01a15 	stw	ra,104(sp)
   101b0:	df001915 	stw	fp,100(sp)
   101b4:	2029883a 	mov	r20,r4
   101b8:	2823883a 	mov	r17,r5
   101bc:	382d883a 	mov	r22,r7
   101c0:	d9800f15 	stw	r6,60(sp)
   101c4:	0021883a 	mov	r16,zero
   101c8:	d8000e15 	stw	zero,56(sp)
   101cc:	d8000a15 	stw	zero,40(sp)
   101d0:	002b883a 	mov	r21,zero
   101d4:	0027883a 	mov	r19,zero
   101d8:	0025883a 	mov	r18,zero
   101dc:	d8000c15 	stw	zero,48(sp)
   101e0:	d8000b15 	stw	zero,44(sp)
   101e4:	002f883a 	mov	r23,zero
   101e8:	d8c00915 	stw	r3,36(sp)
   101ec:	d8c00f17 	ldw	r3,60(sp)
   101f0:	19000003 	ldbu	r4,0(r3)
   101f4:	20803fcc 	andi	r2,r4,255
   101f8:	1080201c 	xori	r2,r2,128
   101fc:	10bfe004 	addi	r2,r2,-128
   10200:	10011e26 	beq	r2,zero,1067c <___vfprintf_internal_r+0x4f8>
   10204:	00c00044 	movi	r3,1
   10208:	b8c01426 	beq	r23,r3,1025c <___vfprintf_internal_r+0xd8>
   1020c:	1dc00216 	blt	r3,r23,10218 <___vfprintf_internal_r+0x94>
   10210:	b8000626 	beq	r23,zero,1022c <___vfprintf_internal_r+0xa8>
   10214:	00011506 	br	1066c <___vfprintf_internal_r+0x4e8>
   10218:	01400084 	movi	r5,2
   1021c:	b9401d26 	beq	r23,r5,10294 <___vfprintf_internal_r+0x110>
   10220:	014000c4 	movi	r5,3
   10224:	b9402b26 	beq	r23,r5,102d4 <___vfprintf_internal_r+0x150>
   10228:	00011006 	br	1066c <___vfprintf_internal_r+0x4e8>
   1022c:	01400944 	movi	r5,37
   10230:	1140fc26 	beq	r2,r5,10624 <___vfprintf_internal_r+0x4a0>
   10234:	88800117 	ldw	r2,4(r17)
   10238:	d9000005 	stb	r4,0(sp)
   1023c:	01c00044 	movi	r7,1
   10240:	d80d883a 	mov	r6,sp
   10244:	880b883a 	mov	r5,r17
   10248:	a009883a 	mov	r4,r20
   1024c:	103ee83a 	callr	r2
   10250:	1000d81e 	bne	r2,zero,105b4 <___vfprintf_internal_r+0x430>
   10254:	84000044 	addi	r16,r16,1
   10258:	00010406 	br	1066c <___vfprintf_internal_r+0x4e8>
   1025c:	01400c04 	movi	r5,48
   10260:	1140fa26 	beq	r2,r5,1064c <___vfprintf_internal_r+0x4c8>
   10264:	01400944 	movi	r5,37
   10268:	11400a1e 	bne	r2,r5,10294 <___vfprintf_internal_r+0x110>
   1026c:	d8800005 	stb	r2,0(sp)
   10270:	88800117 	ldw	r2,4(r17)
   10274:	b80f883a 	mov	r7,r23
   10278:	d80d883a 	mov	r6,sp
   1027c:	880b883a 	mov	r5,r17
   10280:	a009883a 	mov	r4,r20
   10284:	103ee83a 	callr	r2
   10288:	1000ca1e 	bne	r2,zero,105b4 <___vfprintf_internal_r+0x430>
   1028c:	84000044 	addi	r16,r16,1
   10290:	0000f506 	br	10668 <___vfprintf_internal_r+0x4e4>
   10294:	25fff404 	addi	r23,r4,-48
   10298:	bdc03fcc 	andi	r23,r23,255
   1029c:	00c00244 	movi	r3,9
   102a0:	1dc00936 	bltu	r3,r23,102c8 <___vfprintf_internal_r+0x144>
   102a4:	00bfffc4 	movi	r2,-1
   102a8:	90800426 	beq	r18,r2,102bc <___vfprintf_internal_r+0x138>
   102ac:	01400284 	movi	r5,10
   102b0:	9009883a 	mov	r4,r18
   102b4:	00109ac0 	call	109ac <__mulsi3>
   102b8:	00000106 	br	102c0 <___vfprintf_internal_r+0x13c>
   102bc:	0005883a 	mov	r2,zero
   102c0:	b8a5883a 	add	r18,r23,r2
   102c4:	0000e206 	br	10650 <___vfprintf_internal_r+0x4cc>
   102c8:	01400b84 	movi	r5,46
   102cc:	1140e426 	beq	r2,r5,10660 <___vfprintf_internal_r+0x4dc>
   102d0:	05c00084 	movi	r23,2
   102d4:	213ff404 	addi	r4,r4,-48
   102d8:	27003fcc 	andi	fp,r4,255
   102dc:	00c00244 	movi	r3,9
   102e0:	1f000936 	bltu	r3,fp,10308 <___vfprintf_internal_r+0x184>
   102e4:	00bfffc4 	movi	r2,-1
   102e8:	98800426 	beq	r19,r2,102fc <___vfprintf_internal_r+0x178>
   102ec:	01400284 	movi	r5,10
   102f0:	9809883a 	mov	r4,r19
   102f4:	00109ac0 	call	109ac <__mulsi3>
   102f8:	00000106 	br	10300 <___vfprintf_internal_r+0x17c>
   102fc:	0005883a 	mov	r2,zero
   10300:	e0a7883a 	add	r19,fp,r2
   10304:	0000d906 	br	1066c <___vfprintf_internal_r+0x4e8>
   10308:	00c01b04 	movi	r3,108
   1030c:	10c0d226 	beq	r2,r3,10658 <___vfprintf_internal_r+0x4d4>
   10310:	013fffc4 	movi	r4,-1
   10314:	99000226 	beq	r19,r4,10320 <___vfprintf_internal_r+0x19c>
   10318:	d8000b15 	stw	zero,44(sp)
   1031c:	00000106 	br	10324 <___vfprintf_internal_r+0x1a0>
   10320:	04c00044 	movi	r19,1
   10324:	01001a44 	movi	r4,105
   10328:	11001626 	beq	r2,r4,10384 <___vfprintf_internal_r+0x200>
   1032c:	20800916 	blt	r4,r2,10354 <___vfprintf_internal_r+0x1d0>
   10330:	010018c4 	movi	r4,99
   10334:	11008826 	beq	r2,r4,10558 <___vfprintf_internal_r+0x3d4>
   10338:	01001904 	movi	r4,100
   1033c:	11001126 	beq	r2,r4,10384 <___vfprintf_internal_r+0x200>
   10340:	01001604 	movi	r4,88
   10344:	1100c81e 	bne	r2,r4,10668 <___vfprintf_internal_r+0x4e4>
   10348:	00c00044 	movi	r3,1
   1034c:	d8c00e15 	stw	r3,56(sp)
   10350:	00001506 	br	103a8 <___vfprintf_internal_r+0x224>
   10354:	01001cc4 	movi	r4,115
   10358:	11009826 	beq	r2,r4,105bc <___vfprintf_internal_r+0x438>
   1035c:	20800416 	blt	r4,r2,10370 <___vfprintf_internal_r+0x1ec>
   10360:	01001bc4 	movi	r4,111
   10364:	1100c01e 	bne	r2,r4,10668 <___vfprintf_internal_r+0x4e4>
   10368:	05400204 	movi	r21,8
   1036c:	00000f06 	br	103ac <___vfprintf_internal_r+0x228>
   10370:	01001d44 	movi	r4,117
   10374:	11000d26 	beq	r2,r4,103ac <___vfprintf_internal_r+0x228>
   10378:	01001e04 	movi	r4,120
   1037c:	11000a26 	beq	r2,r4,103a8 <___vfprintf_internal_r+0x224>
   10380:	0000b906 	br	10668 <___vfprintf_internal_r+0x4e4>
   10384:	d8c00a17 	ldw	r3,40(sp)
   10388:	b7000104 	addi	fp,r22,4
   1038c:	18000726 	beq	r3,zero,103ac <___vfprintf_internal_r+0x228>
   10390:	df000d15 	stw	fp,52(sp)
   10394:	b5c00017 	ldw	r23,0(r22)
   10398:	b800080e 	bge	r23,zero,103bc <___vfprintf_internal_r+0x238>
   1039c:	05efc83a 	sub	r23,zero,r23
   103a0:	02400044 	movi	r9,1
   103a4:	00000606 	br	103c0 <___vfprintf_internal_r+0x23c>
   103a8:	05400404 	movi	r21,16
   103ac:	b0c00104 	addi	r3,r22,4
   103b0:	d8c00d15 	stw	r3,52(sp)
   103b4:	b5c00017 	ldw	r23,0(r22)
   103b8:	d8000a15 	stw	zero,40(sp)
   103bc:	0013883a 	mov	r9,zero
   103c0:	d839883a 	mov	fp,sp
   103c4:	b8001726 	beq	r23,zero,10424 <___vfprintf_internal_r+0x2a0>
   103c8:	a80b883a 	mov	r5,r21
   103cc:	b809883a 	mov	r4,r23
   103d0:	da401015 	stw	r9,64(sp)
   103d4:	00108f00 	call	108f0 <__udivsi3>
   103d8:	a80b883a 	mov	r5,r21
   103dc:	1009883a 	mov	r4,r2
   103e0:	102d883a 	mov	r22,r2
   103e4:	00109ac0 	call	109ac <__mulsi3>
   103e8:	b885c83a 	sub	r2,r23,r2
   103ec:	00c00244 	movi	r3,9
   103f0:	da401017 	ldw	r9,64(sp)
   103f4:	18800216 	blt	r3,r2,10400 <___vfprintf_internal_r+0x27c>
   103f8:	10800c04 	addi	r2,r2,48
   103fc:	00000506 	br	10414 <___vfprintf_internal_r+0x290>
   10400:	d8c00e17 	ldw	r3,56(sp)
   10404:	18000226 	beq	r3,zero,10410 <___vfprintf_internal_r+0x28c>
   10408:	10800dc4 	addi	r2,r2,55
   1040c:	00000106 	br	10414 <___vfprintf_internal_r+0x290>
   10410:	108015c4 	addi	r2,r2,87
   10414:	e0800005 	stb	r2,0(fp)
   10418:	b02f883a 	mov	r23,r22
   1041c:	e7000044 	addi	fp,fp,1
   10420:	003fe806 	br	103c4 <__alt_data_end+0xffff63c4>
   10424:	e6efc83a 	sub	r23,fp,sp
   10428:	9dc5c83a 	sub	r2,r19,r23
   1042c:	0080090e 	bge	zero,r2,10454 <___vfprintf_internal_r+0x2d0>
   10430:	e085883a 	add	r2,fp,r2
   10434:	01400c04 	movi	r5,48
   10438:	d8c00917 	ldw	r3,36(sp)
   1043c:	e009883a 	mov	r4,fp
   10440:	e0c0032e 	bgeu	fp,r3,10450 <___vfprintf_internal_r+0x2cc>
   10444:	e7000044 	addi	fp,fp,1
   10448:	21400005 	stb	r5,0(r4)
   1044c:	e0bffa1e 	bne	fp,r2,10438 <__alt_data_end+0xffff6438>
   10450:	e6efc83a 	sub	r23,fp,sp
   10454:	d8c00b17 	ldw	r3,44(sp)
   10458:	4dd1883a 	add	r8,r9,r23
   1045c:	922dc83a 	sub	r22,r18,r8
   10460:	18001626 	beq	r3,zero,104bc <___vfprintf_internal_r+0x338>
   10464:	48000a26 	beq	r9,zero,10490 <___vfprintf_internal_r+0x30c>
   10468:	00800b44 	movi	r2,45
   1046c:	d8800805 	stb	r2,32(sp)
   10470:	88800117 	ldw	r2,4(r17)
   10474:	01c00044 	movi	r7,1
   10478:	d9800804 	addi	r6,sp,32
   1047c:	880b883a 	mov	r5,r17
   10480:	a009883a 	mov	r4,r20
   10484:	103ee83a 	callr	r2
   10488:	10004a1e 	bne	r2,zero,105b4 <___vfprintf_internal_r+0x430>
   1048c:	84000044 	addi	r16,r16,1
   10490:	0580070e 	bge	zero,r22,104b0 <___vfprintf_internal_r+0x32c>
   10494:	b00f883a 	mov	r7,r22
   10498:	01800c04 	movi	r6,48
   1049c:	880b883a 	mov	r5,r17
   104a0:	a009883a 	mov	r4,r20
   104a4:	00101180 	call	10118 <print_repeat>
   104a8:	1000421e 	bne	r2,zero,105b4 <___vfprintf_internal_r+0x430>
   104ac:	85a1883a 	add	r16,r16,r22
   104b0:	e02d883a 	mov	r22,fp
   104b4:	bf2fc83a 	sub	r23,r23,fp
   104b8:	00002006 	br	1053c <___vfprintf_internal_r+0x3b8>
   104bc:	0580090e 	bge	zero,r22,104e4 <___vfprintf_internal_r+0x360>
   104c0:	b00f883a 	mov	r7,r22
   104c4:	01800804 	movi	r6,32
   104c8:	880b883a 	mov	r5,r17
   104cc:	a009883a 	mov	r4,r20
   104d0:	da401015 	stw	r9,64(sp)
   104d4:	00101180 	call	10118 <print_repeat>
   104d8:	da401017 	ldw	r9,64(sp)
   104dc:	1000351e 	bne	r2,zero,105b4 <___vfprintf_internal_r+0x430>
   104e0:	85a1883a 	add	r16,r16,r22
   104e4:	483ff226 	beq	r9,zero,104b0 <__alt_data_end+0xffff64b0>
   104e8:	00800b44 	movi	r2,45
   104ec:	d8800805 	stb	r2,32(sp)
   104f0:	88800117 	ldw	r2,4(r17)
   104f4:	01c00044 	movi	r7,1
   104f8:	d9800804 	addi	r6,sp,32
   104fc:	880b883a 	mov	r5,r17
   10500:	a009883a 	mov	r4,r20
   10504:	103ee83a 	callr	r2
   10508:	10002a1e 	bne	r2,zero,105b4 <___vfprintf_internal_r+0x430>
   1050c:	84000044 	addi	r16,r16,1
   10510:	003fe706 	br	104b0 <__alt_data_end+0xffff64b0>
   10514:	b5bfffc4 	addi	r22,r22,-1
   10518:	b0800003 	ldbu	r2,0(r22)
   1051c:	01c00044 	movi	r7,1
   10520:	d9800804 	addi	r6,sp,32
   10524:	d8800805 	stb	r2,32(sp)
   10528:	88800117 	ldw	r2,4(r17)
   1052c:	880b883a 	mov	r5,r17
   10530:	a009883a 	mov	r4,r20
   10534:	103ee83a 	callr	r2
   10538:	10001e1e 	bne	r2,zero,105b4 <___vfprintf_internal_r+0x430>
   1053c:	8585c83a 	sub	r2,r16,r22
   10540:	b5c9883a 	add	r4,r22,r23
   10544:	e085883a 	add	r2,fp,r2
   10548:	013ff216 	blt	zero,r4,10514 <__alt_data_end+0xffff6514>
   1054c:	1021883a 	mov	r16,r2
   10550:	dd800d17 	ldw	r22,52(sp)
   10554:	00004406 	br	10668 <___vfprintf_internal_r+0x4e4>
   10558:	00800044 	movi	r2,1
   1055c:	1480080e 	bge	r2,r18,10580 <___vfprintf_internal_r+0x3fc>
   10560:	95ffffc4 	addi	r23,r18,-1
   10564:	b80f883a 	mov	r7,r23
   10568:	01800804 	movi	r6,32
   1056c:	880b883a 	mov	r5,r17
   10570:	a009883a 	mov	r4,r20
   10574:	00101180 	call	10118 <print_repeat>
   10578:	10000e1e 	bne	r2,zero,105b4 <___vfprintf_internal_r+0x430>
   1057c:	85e1883a 	add	r16,r16,r23
   10580:	b0800017 	ldw	r2,0(r22)
   10584:	01c00044 	movi	r7,1
   10588:	d80d883a 	mov	r6,sp
   1058c:	d8800005 	stb	r2,0(sp)
   10590:	88800117 	ldw	r2,4(r17)
   10594:	880b883a 	mov	r5,r17
   10598:	a009883a 	mov	r4,r20
   1059c:	b5c00104 	addi	r23,r22,4
   105a0:	103ee83a 	callr	r2
   105a4:	1000031e 	bne	r2,zero,105b4 <___vfprintf_internal_r+0x430>
   105a8:	84000044 	addi	r16,r16,1
   105ac:	b82d883a 	mov	r22,r23
   105b0:	00002d06 	br	10668 <___vfprintf_internal_r+0x4e4>
   105b4:	00bfffc4 	movi	r2,-1
   105b8:	00003106 	br	10680 <___vfprintf_internal_r+0x4fc>
   105bc:	b5c00017 	ldw	r23,0(r22)
   105c0:	b7000104 	addi	fp,r22,4
   105c4:	b809883a 	mov	r4,r23
   105c8:	00107840 	call	10784 <strlen>
   105cc:	9091c83a 	sub	r8,r18,r2
   105d0:	102d883a 	mov	r22,r2
   105d4:	0200090e 	bge	zero,r8,105fc <___vfprintf_internal_r+0x478>
   105d8:	400f883a 	mov	r7,r8
   105dc:	01800804 	movi	r6,32
   105e0:	880b883a 	mov	r5,r17
   105e4:	a009883a 	mov	r4,r20
   105e8:	da001015 	stw	r8,64(sp)
   105ec:	00101180 	call	10118 <print_repeat>
   105f0:	da001017 	ldw	r8,64(sp)
   105f4:	103fef1e 	bne	r2,zero,105b4 <__alt_data_end+0xffff65b4>
   105f8:	8221883a 	add	r16,r16,r8
   105fc:	88800117 	ldw	r2,4(r17)
   10600:	b00f883a 	mov	r7,r22
   10604:	b80d883a 	mov	r6,r23
   10608:	880b883a 	mov	r5,r17
   1060c:	a009883a 	mov	r4,r20
   10610:	103ee83a 	callr	r2
   10614:	103fe71e 	bne	r2,zero,105b4 <__alt_data_end+0xffff65b4>
   10618:	85a1883a 	add	r16,r16,r22
   1061c:	e02d883a 	mov	r22,fp
   10620:	00001106 	br	10668 <___vfprintf_internal_r+0x4e4>
   10624:	00c00044 	movi	r3,1
   10628:	04ffffc4 	movi	r19,-1
   1062c:	d8000e15 	stw	zero,56(sp)
   10630:	d8c00a15 	stw	r3,40(sp)
   10634:	05400284 	movi	r21,10
   10638:	9825883a 	mov	r18,r19
   1063c:	d8000c15 	stw	zero,48(sp)
   10640:	d8000b15 	stw	zero,44(sp)
   10644:	182f883a 	mov	r23,r3
   10648:	00000806 	br	1066c <___vfprintf_internal_r+0x4e8>
   1064c:	ddc00b15 	stw	r23,44(sp)
   10650:	05c00084 	movi	r23,2
   10654:	00000506 	br	1066c <___vfprintf_internal_r+0x4e8>
   10658:	00c00044 	movi	r3,1
   1065c:	d8c00c15 	stw	r3,48(sp)
   10660:	05c000c4 	movi	r23,3
   10664:	00000106 	br	1066c <___vfprintf_internal_r+0x4e8>
   10668:	002f883a 	mov	r23,zero
   1066c:	d8c00f17 	ldw	r3,60(sp)
   10670:	18c00044 	addi	r3,r3,1
   10674:	d8c00f15 	stw	r3,60(sp)
   10678:	003edc06 	br	101ec <__alt_data_end+0xffff61ec>
   1067c:	8005883a 	mov	r2,r16
   10680:	dfc01a17 	ldw	ra,104(sp)
   10684:	df001917 	ldw	fp,100(sp)
   10688:	ddc01817 	ldw	r23,96(sp)
   1068c:	dd801717 	ldw	r22,92(sp)
   10690:	dd401617 	ldw	r21,88(sp)
   10694:	dd001517 	ldw	r20,84(sp)
   10698:	dcc01417 	ldw	r19,80(sp)
   1069c:	dc801317 	ldw	r18,76(sp)
   106a0:	dc401217 	ldw	r17,72(sp)
   106a4:	dc001117 	ldw	r16,68(sp)
   106a8:	dec01b04 	addi	sp,sp,108
   106ac:	f800283a 	ret

000106b0 <__vfprintf_internal>:
   106b0:	00800074 	movhi	r2,1
   106b4:	10834204 	addi	r2,r2,3336
   106b8:	300f883a 	mov	r7,r6
   106bc:	280d883a 	mov	r6,r5
   106c0:	200b883a 	mov	r5,r4
   106c4:	11000017 	ldw	r4,0(r2)
   106c8:	00101841 	jmpi	10184 <___vfprintf_internal_r>

000106cc <__sfvwrite_small_dev>:
   106cc:	2880000b 	ldhu	r2,0(r5)
   106d0:	1080020c 	andi	r2,r2,8
   106d4:	10002126 	beq	r2,zero,1075c <__sfvwrite_small_dev+0x90>
   106d8:	2880008f 	ldh	r2,2(r5)
   106dc:	defffa04 	addi	sp,sp,-24
   106e0:	dc000015 	stw	r16,0(sp)
   106e4:	dfc00515 	stw	ra,20(sp)
   106e8:	dd000415 	stw	r20,16(sp)
   106ec:	dcc00315 	stw	r19,12(sp)
   106f0:	dc800215 	stw	r18,8(sp)
   106f4:	dc400115 	stw	r17,4(sp)
   106f8:	2821883a 	mov	r16,r5
   106fc:	10001216 	blt	r2,zero,10748 <__sfvwrite_small_dev+0x7c>
   10700:	2027883a 	mov	r19,r4
   10704:	3025883a 	mov	r18,r6
   10708:	3823883a 	mov	r17,r7
   1070c:	05010004 	movi	r20,1024
   10710:	04400b0e 	bge	zero,r17,10740 <__sfvwrite_small_dev+0x74>
   10714:	880f883a 	mov	r7,r17
   10718:	a440010e 	bge	r20,r17,10720 <__sfvwrite_small_dev+0x54>
   1071c:	01c10004 	movi	r7,1024
   10720:	8140008f 	ldh	r5,2(r16)
   10724:	900d883a 	mov	r6,r18
   10728:	9809883a 	mov	r4,r19
   1072c:	00107a00 	call	107a0 <_write_r>
   10730:	0080050e 	bge	zero,r2,10748 <__sfvwrite_small_dev+0x7c>
   10734:	88a3c83a 	sub	r17,r17,r2
   10738:	90a5883a 	add	r18,r18,r2
   1073c:	003ff406 	br	10710 <__alt_data_end+0xffff6710>
   10740:	0005883a 	mov	r2,zero
   10744:	00000706 	br	10764 <__sfvwrite_small_dev+0x98>
   10748:	8080000b 	ldhu	r2,0(r16)
   1074c:	10801014 	ori	r2,r2,64
   10750:	8080000d 	sth	r2,0(r16)
   10754:	00bfffc4 	movi	r2,-1
   10758:	00000206 	br	10764 <__sfvwrite_small_dev+0x98>
   1075c:	00bfffc4 	movi	r2,-1
   10760:	f800283a 	ret
   10764:	dfc00517 	ldw	ra,20(sp)
   10768:	dd000417 	ldw	r20,16(sp)
   1076c:	dcc00317 	ldw	r19,12(sp)
   10770:	dc800217 	ldw	r18,8(sp)
   10774:	dc400117 	ldw	r17,4(sp)
   10778:	dc000017 	ldw	r16,0(sp)
   1077c:	dec00604 	addi	sp,sp,24
   10780:	f800283a 	ret

00010784 <strlen>:
   10784:	2005883a 	mov	r2,r4
   10788:	10c00007 	ldb	r3,0(r2)
   1078c:	18000226 	beq	r3,zero,10798 <strlen+0x14>
   10790:	10800044 	addi	r2,r2,1
   10794:	003ffc06 	br	10788 <__alt_data_end+0xffff6788>
   10798:	1105c83a 	sub	r2,r2,r4
   1079c:	f800283a 	ret

000107a0 <_write_r>:
   107a0:	defffd04 	addi	sp,sp,-12
   107a4:	dc000015 	stw	r16,0(sp)
   107a8:	04000074 	movhi	r16,1
   107ac:	dc400115 	stw	r17,4(sp)
   107b0:	84038104 	addi	r16,r16,3588
   107b4:	2023883a 	mov	r17,r4
   107b8:	2809883a 	mov	r4,r5
   107bc:	300b883a 	mov	r5,r6
   107c0:	380d883a 	mov	r6,r7
   107c4:	dfc00215 	stw	ra,8(sp)
   107c8:	80000015 	stw	zero,0(r16)
   107cc:	0010b180 	call	10b18 <write>
   107d0:	00ffffc4 	movi	r3,-1
   107d4:	10c0031e 	bne	r2,r3,107e4 <_write_r+0x44>
   107d8:	80c00017 	ldw	r3,0(r16)
   107dc:	18000126 	beq	r3,zero,107e4 <_write_r+0x44>
   107e0:	88c00015 	stw	r3,0(r17)
   107e4:	dfc00217 	ldw	ra,8(sp)
   107e8:	dc400117 	ldw	r17,4(sp)
   107ec:	dc000017 	ldw	r16,0(sp)
   107f0:	dec00304 	addi	sp,sp,12
   107f4:	f800283a 	ret

000107f8 <__divsi3>:
   107f8:	20001b16 	blt	r4,zero,10868 <__divsi3+0x70>
   107fc:	000f883a 	mov	r7,zero
   10800:	28001616 	blt	r5,zero,1085c <__divsi3+0x64>
   10804:	200d883a 	mov	r6,r4
   10808:	29001a2e 	bgeu	r5,r4,10874 <__divsi3+0x7c>
   1080c:	00800804 	movi	r2,32
   10810:	00c00044 	movi	r3,1
   10814:	00000106 	br	1081c <__divsi3+0x24>
   10818:	10000d26 	beq	r2,zero,10850 <__divsi3+0x58>
   1081c:	294b883a 	add	r5,r5,r5
   10820:	10bfffc4 	addi	r2,r2,-1
   10824:	18c7883a 	add	r3,r3,r3
   10828:	293ffb36 	bltu	r5,r4,10818 <__alt_data_end+0xffff6818>
   1082c:	0005883a 	mov	r2,zero
   10830:	18000726 	beq	r3,zero,10850 <__divsi3+0x58>
   10834:	0005883a 	mov	r2,zero
   10838:	31400236 	bltu	r6,r5,10844 <__divsi3+0x4c>
   1083c:	314dc83a 	sub	r6,r6,r5
   10840:	10c4b03a 	or	r2,r2,r3
   10844:	1806d07a 	srli	r3,r3,1
   10848:	280ad07a 	srli	r5,r5,1
   1084c:	183ffa1e 	bne	r3,zero,10838 <__alt_data_end+0xffff6838>
   10850:	38000126 	beq	r7,zero,10858 <__divsi3+0x60>
   10854:	0085c83a 	sub	r2,zero,r2
   10858:	f800283a 	ret
   1085c:	014bc83a 	sub	r5,zero,r5
   10860:	39c0005c 	xori	r7,r7,1
   10864:	003fe706 	br	10804 <__alt_data_end+0xffff6804>
   10868:	0109c83a 	sub	r4,zero,r4
   1086c:	01c00044 	movi	r7,1
   10870:	003fe306 	br	10800 <__alt_data_end+0xffff6800>
   10874:	00c00044 	movi	r3,1
   10878:	003fee06 	br	10834 <__alt_data_end+0xffff6834>

0001087c <__modsi3>:
   1087c:	20001716 	blt	r4,zero,108dc <__modsi3+0x60>
   10880:	000f883a 	mov	r7,zero
   10884:	2005883a 	mov	r2,r4
   10888:	28001216 	blt	r5,zero,108d4 <__modsi3+0x58>
   1088c:	2900162e 	bgeu	r5,r4,108e8 <__modsi3+0x6c>
   10890:	01800804 	movi	r6,32
   10894:	00c00044 	movi	r3,1
   10898:	00000106 	br	108a0 <__modsi3+0x24>
   1089c:	30000a26 	beq	r6,zero,108c8 <__modsi3+0x4c>
   108a0:	294b883a 	add	r5,r5,r5
   108a4:	31bfffc4 	addi	r6,r6,-1
   108a8:	18c7883a 	add	r3,r3,r3
   108ac:	293ffb36 	bltu	r5,r4,1089c <__alt_data_end+0xffff689c>
   108b0:	18000526 	beq	r3,zero,108c8 <__modsi3+0x4c>
   108b4:	1806d07a 	srli	r3,r3,1
   108b8:	11400136 	bltu	r2,r5,108c0 <__modsi3+0x44>
   108bc:	1145c83a 	sub	r2,r2,r5
   108c0:	280ad07a 	srli	r5,r5,1
   108c4:	183ffb1e 	bne	r3,zero,108b4 <__alt_data_end+0xffff68b4>
   108c8:	38000126 	beq	r7,zero,108d0 <__modsi3+0x54>
   108cc:	0085c83a 	sub	r2,zero,r2
   108d0:	f800283a 	ret
   108d4:	014bc83a 	sub	r5,zero,r5
   108d8:	003fec06 	br	1088c <__alt_data_end+0xffff688c>
   108dc:	0109c83a 	sub	r4,zero,r4
   108e0:	01c00044 	movi	r7,1
   108e4:	003fe706 	br	10884 <__alt_data_end+0xffff6884>
   108e8:	00c00044 	movi	r3,1
   108ec:	003ff106 	br	108b4 <__alt_data_end+0xffff68b4>

000108f0 <__udivsi3>:
   108f0:	200d883a 	mov	r6,r4
   108f4:	2900152e 	bgeu	r5,r4,1094c <__udivsi3+0x5c>
   108f8:	28001416 	blt	r5,zero,1094c <__udivsi3+0x5c>
   108fc:	00800804 	movi	r2,32
   10900:	00c00044 	movi	r3,1
   10904:	00000206 	br	10910 <__udivsi3+0x20>
   10908:	10000e26 	beq	r2,zero,10944 <__udivsi3+0x54>
   1090c:	28000516 	blt	r5,zero,10924 <__udivsi3+0x34>
   10910:	294b883a 	add	r5,r5,r5
   10914:	10bfffc4 	addi	r2,r2,-1
   10918:	18c7883a 	add	r3,r3,r3
   1091c:	293ffa36 	bltu	r5,r4,10908 <__alt_data_end+0xffff6908>
   10920:	18000826 	beq	r3,zero,10944 <__udivsi3+0x54>
   10924:	0005883a 	mov	r2,zero
   10928:	31400236 	bltu	r6,r5,10934 <__udivsi3+0x44>
   1092c:	314dc83a 	sub	r6,r6,r5
   10930:	10c4b03a 	or	r2,r2,r3
   10934:	1806d07a 	srli	r3,r3,1
   10938:	280ad07a 	srli	r5,r5,1
   1093c:	183ffa1e 	bne	r3,zero,10928 <__alt_data_end+0xffff6928>
   10940:	f800283a 	ret
   10944:	0005883a 	mov	r2,zero
   10948:	f800283a 	ret
   1094c:	00c00044 	movi	r3,1
   10950:	003ff406 	br	10924 <__alt_data_end+0xffff6924>

00010954 <__umodsi3>:
   10954:	2005883a 	mov	r2,r4
   10958:	2900122e 	bgeu	r5,r4,109a4 <__umodsi3+0x50>
   1095c:	28001116 	blt	r5,zero,109a4 <__umodsi3+0x50>
   10960:	01800804 	movi	r6,32
   10964:	00c00044 	movi	r3,1
   10968:	00000206 	br	10974 <__umodsi3+0x20>
   1096c:	30000c26 	beq	r6,zero,109a0 <__umodsi3+0x4c>
   10970:	28000516 	blt	r5,zero,10988 <__umodsi3+0x34>
   10974:	294b883a 	add	r5,r5,r5
   10978:	31bfffc4 	addi	r6,r6,-1
   1097c:	18c7883a 	add	r3,r3,r3
   10980:	293ffa36 	bltu	r5,r4,1096c <__alt_data_end+0xffff696c>
   10984:	18000626 	beq	r3,zero,109a0 <__umodsi3+0x4c>
   10988:	1806d07a 	srli	r3,r3,1
   1098c:	11400136 	bltu	r2,r5,10994 <__umodsi3+0x40>
   10990:	1145c83a 	sub	r2,r2,r5
   10994:	280ad07a 	srli	r5,r5,1
   10998:	183ffb1e 	bne	r3,zero,10988 <__alt_data_end+0xffff6988>
   1099c:	f800283a 	ret
   109a0:	f800283a 	ret
   109a4:	00c00044 	movi	r3,1
   109a8:	003ff706 	br	10988 <__alt_data_end+0xffff6988>

000109ac <__mulsi3>:
   109ac:	0005883a 	mov	r2,zero
   109b0:	20000726 	beq	r4,zero,109d0 <__mulsi3+0x24>
   109b4:	20c0004c 	andi	r3,r4,1
   109b8:	2008d07a 	srli	r4,r4,1
   109bc:	18000126 	beq	r3,zero,109c4 <__mulsi3+0x18>
   109c0:	1145883a 	add	r2,r2,r5
   109c4:	294b883a 	add	r5,r5,r5
   109c8:	203ffa1e 	bne	r4,zero,109b4 <__alt_data_end+0xffff69b4>
   109cc:	f800283a 	ret
   109d0:	f800283a 	ret

000109d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   109d4:	deffff04 	addi	sp,sp,-4
   109d8:	01000074 	movhi	r4,1
   109dc:	01400074 	movhi	r5,1
   109e0:	dfc00015 	stw	ra,0(sp)
   109e4:	21030904 	addi	r4,r4,3108
   109e8:	29434504 	addi	r5,r5,3348

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   109ec:	2140061e 	bne	r4,r5,10a08 <alt_load+0x34>
   109f0:	01000074 	movhi	r4,1
   109f4:	01400074 	movhi	r5,1
   109f8:	21000804 	addi	r4,r4,32
   109fc:	29400804 	addi	r5,r5,32
   10a00:	2140121e 	bne	r4,r5,10a4c <alt_load+0x78>
   10a04:	00000b06 	br	10a34 <alt_load+0x60>
   10a08:	00c00074 	movhi	r3,1
   10a0c:	18c34504 	addi	r3,r3,3348
   10a10:	1907c83a 	sub	r3,r3,r4
   10a14:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10a18:	10fff526 	beq	r2,r3,109f0 <__alt_data_end+0xffff69f0>
    {
      *to++ = *from++;
   10a1c:	114f883a 	add	r7,r2,r5
   10a20:	39c00017 	ldw	r7,0(r7)
   10a24:	110d883a 	add	r6,r2,r4
   10a28:	10800104 	addi	r2,r2,4
   10a2c:	31c00015 	stw	r7,0(r6)
   10a30:	003ff906 	br	10a18 <__alt_data_end+0xffff6a18>
   10a34:	01000074 	movhi	r4,1
   10a38:	01400074 	movhi	r5,1
   10a3c:	2102f804 	addi	r4,r4,3040
   10a40:	2942f804 	addi	r5,r5,3040

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10a44:	2140101e 	bne	r4,r5,10a88 <alt_load+0xb4>
   10a48:	00000b06 	br	10a78 <alt_load+0xa4>
   10a4c:	00c00074 	movhi	r3,1
   10a50:	18c00804 	addi	r3,r3,32
   10a54:	1907c83a 	sub	r3,r3,r4
   10a58:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10a5c:	10fff526 	beq	r2,r3,10a34 <__alt_data_end+0xffff6a34>
    {
      *to++ = *from++;
   10a60:	114f883a 	add	r7,r2,r5
   10a64:	39c00017 	ldw	r7,0(r7)
   10a68:	110d883a 	add	r6,r2,r4
   10a6c:	10800104 	addi	r2,r2,4
   10a70:	31c00015 	stw	r7,0(r6)
   10a74:	003ff906 	br	10a5c <__alt_data_end+0xffff6a5c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10a78:	0010bd00 	call	10bd0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10a7c:	dfc00017 	ldw	ra,0(sp)
   10a80:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10a84:	0010bd41 	jmpi	10bd4 <alt_icache_flush_all>
   10a88:	00c00074 	movhi	r3,1
   10a8c:	18c30904 	addi	r3,r3,3108
   10a90:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10a94:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10a98:	18bff726 	beq	r3,r2,10a78 <__alt_data_end+0xffff6a78>
    {
      *to++ = *from++;
   10a9c:	114f883a 	add	r7,r2,r5
   10aa0:	39c00017 	ldw	r7,0(r7)
   10aa4:	110d883a 	add	r6,r2,r4
   10aa8:	10800104 	addi	r2,r2,4
   10aac:	31c00015 	stw	r7,0(r6)
   10ab0:	003ff906 	br	10a98 <__alt_data_end+0xffff6a98>

00010ab4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10ab4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10ab8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10abc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10ac0:	0010b780 	call	10b78 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10ac4:	0010b980 	call	10b98 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10ac8:	d1a04117 	ldw	r6,-32508(gp)
   10acc:	d1604217 	ldw	r5,-32504(gp)
   10ad0:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10ad4:	dfc00017 	ldw	ra,0(sp)
   10ad8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10adc:	001005c1 	jmpi	1005c <main>

00010ae0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10ae0:	defffe04 	addi	sp,sp,-8
   10ae4:	dc000015 	stw	r16,0(sp)
   10ae8:	dfc00115 	stw	ra,4(sp)
   10aec:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10af0:	00107840 	call	10784 <strlen>
   10af4:	01000074 	movhi	r4,1
   10af8:	000f883a 	mov	r7,zero
   10afc:	100d883a 	mov	r6,r2
   10b00:	800b883a 	mov	r5,r16
   10b04:	21034304 	addi	r4,r4,3340
#else
    return fputs(str, stdout);
#endif
#endif
}
   10b08:	dfc00117 	ldw	ra,4(sp)
   10b0c:	dc000017 	ldw	r16,0(sp)
   10b10:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10b14:	0010b9c1 	jmpi	10b9c <altera_avalon_jtag_uart_write>

00010b18 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10b18:	00800044 	movi	r2,1
   10b1c:	20800226 	beq	r4,r2,10b28 <write+0x10>
   10b20:	00800084 	movi	r2,2
   10b24:	2080041e 	bne	r4,r2,10b38 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10b28:	01000074 	movhi	r4,1
   10b2c:	000f883a 	mov	r7,zero
   10b30:	21034304 	addi	r4,r4,3340
   10b34:	0010b9c1 	jmpi	10b9c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10b38:	d0a00317 	ldw	r2,-32756(gp)
   10b3c:	10000926 	beq	r2,zero,10b64 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10b40:	deffff04 	addi	sp,sp,-4
   10b44:	dfc00015 	stw	ra,0(sp)
   10b48:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10b4c:	00c01444 	movi	r3,81
   10b50:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10b54:	00bfffc4 	movi	r2,-1
   10b58:	dfc00017 	ldw	ra,0(sp)
   10b5c:	dec00104 	addi	sp,sp,4
   10b60:	f800283a 	ret
   10b64:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10b68:	00c01444 	movi	r3,81
   10b6c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10b70:	00bfffc4 	movi	r2,-1
   10b74:	f800283a 	ret

00010b78 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10b78:	deffff04 	addi	sp,sp,-4
   10b7c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
   10b80:	0010bd80 	call	10bd8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10b84:	00800044 	movi	r2,1
   10b88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10b8c:	dfc00017 	ldw	ra,0(sp)
   10b90:	dec00104 	addi	sp,sp,4
   10b94:	f800283a 	ret

00010b98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10b98:	f800283a 	ret

00010b9c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10b9c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10ba0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   10ba4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10ba8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10bac:	2980072e 	bgeu	r5,r6,10bcc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10bb0:	38c00037 	ldwio	r3,0(r7)
   10bb4:	18ffffec 	andhi	r3,r3,65535
   10bb8:	183ffc26 	beq	r3,zero,10bac <__alt_data_end+0xffff6bac>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10bbc:	28c00007 	ldb	r3,0(r5)
   10bc0:	20c00035 	stwio	r3,0(r4)
   10bc4:	29400044 	addi	r5,r5,1
   10bc8:	003ff806 	br	10bac <__alt_data_end+0xffff6bac>

  return count;
}
   10bcc:	f800283a 	ret

00010bd0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10bd0:	f800283a 	ret

00010bd4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10bd4:	f800283a 	ret

00010bd8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10bd8:	000170fa 	wrctl	ienable,zero
   10bdc:	f800283a 	ret
